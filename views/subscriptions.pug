extends ./index.pug

block content
    .container
        .row
            .col-lg-5.mx-auto
                h2 Alarms
                div(id="SimpleJSTree")
                h2 Heartbeats
                div(id="HeartbeatsJSTree")

            .col-lg-7.mx-auto
                //- h2 Details
                //- div(id="description")
                //-     p Hover over an Event to Have its Description Appear Here
                //- br
                //- br
                h2 Current Subscriptions
                table#subscriptions_table.display(style='width:100%')
                br
                br
                button#dtButton.btn.btn-primary Update Subscription
        br
        div(id='deletedsub')

         
block extra_scripts
    script.
        $('[data-toggle="tooltip"]').tooltip();
        var catdata = !{JSON.stringify(categories)};
        var subdata = !{JSON.stringify(subscriptions)};

        ( function () {
            var table = $('#subscriptions_table').DataTable({
                "data": subdata,
                "paging": false,
                "searching": false,
                "columns": [
                    {title:"Category", data: "category"},
                    {title:"Subcategory", data: "subcategory"},
                    {title:"Event", data: 'event'},
                    {title:"Tags", data: 'tags',
                        render: function (data, type, row) {
                                //- console.log('data:',data,'row:',row );
                                if (row.tags === undefined){row.tags = '*';}
                                return '<input class="form-control tagInput" name="Tags" type="text" value = ' + row.tags + ' >';
                            }
                    },
                ],
                "drawCallback": function( settings ) {
                  $(".tagInput").on("change",function(){
                       var $row = $(this).parents("tr");
                       var rowData = table.row($row).data();
                       rowData.tags = $(this).val();
                       console.log('row changed', rowData);
                  })
                },
            });
        }());

        //- for (i=0; i<subdata.length; i++) {
        //-     for (j=0; j<catdata.length; j++) {
        //-         if (subdata[i] === catdata[j]) {
        //-             var deletedsubs = document.getElementById('deletedsubs')
        //-             deletedsubs.innerHTML = ''
        //-             deletedsubs.innerHTML = 'Your current subscription was either renamed or deleted. Upon updating your selected alarms, this alarm will no longer be a part of your current subscriptions.'
        //-         }
        //-     }
        //- }

        treedata = []
        for (i=0; i<catdata.length; i++) {
            treedata.push({
                "id":catdata[i].category.replaceAll(' ', '_'),
                "parent":"#",
                "text":catdata[i].category
                });
            treedata.push({
                "id": (catdata[i].category+"VV"+catdata[i].subcategory).replaceAll(' ', '_'),
                "parent":catdata[i].category.replaceAll(' ', '_'),
                "text":catdata[i].subcategory
                });
            treedata.push({
                "id":(catdata[i].category+"VV"+catdata[i].subcategory+"VV"+catdata[i].event).replaceAll(' ', '_'),
                "parent": (catdata[i].category+"VV"+catdata[i].subcategory).replaceAll(' ', '_'),
                "text":catdata[i].event,
                "data":catdata[i].description
                });
        };


        //- sets what's selected and what not

        for (i=0; i<treedata.length; i+=3) {
            cat = treedata[i].text;
            sub = treedata[i+1].text;
            eve = treedata[i+2].text;
            var arr = {"category":cat,"subcategory":sub,"event":eve};
            for (j=0; j<subdata.length; j++) {
                //console.log('cat arr',arr);
                //console.log(subdata[j]);
                if (arr.category === subdata[j].category) {
                    if (arr.subcategory === subdata[j].subcategory) {
                        if (arr.event === subdata[j].event) {
                            //console.log('match',arr);
                            treedata[i+2].state = {"loaded":true, "opened": false, "selected":true, "disabled":false}
                        }
                    }
                }
            }
        }

        function multiDimensionalUnique(arr) {
            var uniques = [];
            var itemsFound = {};
            for(var i = 0, l = arr.length; i < l; i++) {
                var stringified = JSON.stringify(arr[i]);
                if(itemsFound[stringified]) { continue; }
                uniques.push(arr[i]);
                itemsFound[stringified] = true;
            }
            return uniques;
        }
        treedata = multiDimensionalUnique(treedata)
 
        //console.log('rendered subscriptions data',subdata);
        //console.log('rendered categories data',catdata);
        //console.log('test jstree data',treedata);

        $('#SimpleJSTree #HeartbeatsJSTree').jstree({
            core: {
                themes: {
                    variant: "large",
                    icons: false
                },
                data: treedata
            },    
            plugins: ["checkbox"]
        });
        
        $('#SimpleJSTree #AlarmsJSTree').jstree('close_all');

        $('#SimpleJSTree #HeartbeatsJSTree').on("changed.jstree", function (e, data) {
            var cn=data.node;
            //- console.log('changed:',cn);
            if (cn===undefined){return;}
            var selected=cn.state.selected;
            var newData=[];
            if (cn.id.split('VV').length === 3){ //- check if this is leaf
                var vs=cn.id.replaceAll('_', ' ').split('VV');
                newData.push({'category':vs[0],'subcategory':vs[1], 'event':vs[2], 'tags':'*'});
            } else {
                 cn.children_d.forEach(c=>{
                    if (c.split('VV').length===3){
                        var vs=c.replaceAll('_', ' ').split('VV');
                        newData.push({'category':vs[0],'subcategory':vs[1], 'event':vs[2], 'tags':'*'});
                    }
                })
            }
            
            var st=$('#subscriptions_table').DataTable();
            oldData=st.data().toArray();
            console.log('newdata', newData);
            console.log('olddata', oldData);
            
            var nd=[];
            if (selected === true){ // adding
                nd=nd.concat(oldData);
                newData.forEach(nr=>{
                    var found=false;
                    oldData.forEach(or=>{
                        if (nr['category'] === or['category'] && nr['subcategory'] === or['subcategory'] && nr['event']===or['event']){
                            found=true;
                        }
                    })
                    if (found === false){
                        var cleanedNR = {
                            category:nr['category'],
                            subcategory:nr['subcategory'],
                            event:nr['event'],
                            tags:'*'
                        };
                        nd.push(cleanedNR);
                    }
                })
            }else{ // removing 
                oldData.forEach(or=>{
                    var found=false;
                    newData.forEach(nr=>{
                        if (nr['category'] === or['category'] && nr['subcategory'] === or['subcategory'] && nr['event']===or['event']){
                            found=true;
                        }
                    })
                    if (found === false){
                        nd.push(or);
                    }
                })
            }
            st.clear().rows.add(nd).draw();
        });

        $('#SimpleJSTree #HeartbeatsJSTree').bind("hover_node.jstree", function(e, data) {
            //- console.log('data', data);
            if (data.node.children.length === 0) {
                //- $('#description').innerHTML=data.node.data;
                $('#' + data.node.id).attr('title', data.node.data);
            };
        });       
        
        $('#dtButton').click((event) => {
            subdata=$('#subscriptions_table').DataTable().data().toArray();
            toSend=JSON.stringify(subdata);
            let jqxhr = $.ajax({
                type: 'post',
                url: '/user/subscriptions/#{userId}',
                contentType: 'application/json',
                data: toSend,
                success() {
                    console.log('success');
                },
                error(xhr, textStatus, errorThrown) {
                    alert(`Error Code::${xhr.status}.${xhr.responseText}`);
                }
            })
            setTimeout(location.reload.bind(location), 300);
        });